META
====
   Pending documentation improvements

DESCRIPTION
===========
   Todo: fix pre-justified hyphens throughout this doc

   (The *original entry* is located in 
   /home/lddoc/source/LPC/closure_guide.rst, line 3.)

   Todo: fix code indentation throughout

   (The *original entry* is located in 
   /home/lddoc/source/LPC/closure_guide.rst, line 5.)

   Todo: most of this doc just uses implicit definition lists, but one section
   uses the enumerate directive; they should probably all use enumerate, no?

   (The *original entry* is located in 
   /home/lddoc/source/LPC/closure_guide.rst, line 7.)

   Todo: fix this section. probably only a table or raw plaintext can handle 
   this, if even that...

   (The *original entry* is located in 
   /home/lddoc/source/LPC/closure_guide.rst, line 380.)

   Todo: Is there a better way to structure the various closure documents so 
   that there's a single topical heading? Or is that the job of a :topics: or 
   :tags: option?

   (The *original entry* is located in /home/lddoc/source/LPC/closures.rst, 
   line 3.)

   Todo: in the original docs, there is a separate file (closures-abstract) 
   with a copy of the content in this section. Assuming we want to preserve it
   as an artifact, I'm still looking for a good way to advertise its 
   presence. This may get resolved through the general process of cleaning up 
   how closures is structured.

   (The *original entry* is located in /home/lddoc/source/LPC/closures.rst, 
   line 152.)

   Todo: slashes need escaping, but I'd like to wait to see if they can be a 
   good test case for a linter rule to detect things that probably need 
   escaping.

   (The *original entry* is located in /home/lddoc/source/LPC/escape.rst, line
   12.)

   Todo: we don't really document that exponential notation is completely 
   valid; needs a syntax def

   (The *original entry* is located in /home/lddoc/source/LPC/float.rst, line 
   5.)

   Todo: in theory this information has value in the functions doc, but 
   there's also value to keeping it as a separate doc so that the term "lfuns"
   is easily discoverable in the plaintext docs.

   (The *original entry* is located in /home/lddoc/source/LPC/lfuns.rst, line 
   3.)

   Todo: directory+applied is the best reference we have right now, but as I 
   write it, it seems odd (semantically) that it isn't pointing to a 
   term/concept/driver/language doc of some sort?

   (The *original entry* is located in /home/lddoc/source/LPC/lfuns.rst, line 
   30.)

   Todo: vary this language depending on whether we're generating HTML or 
   plaintext (or make it generic enough to suit both)

   (The *original entry* is located in /home/lddoc/source/LPC/lpc.rst, line 
   3.)

   Todo: consider breaking this down into feature categories for easier 
   browsing?

   (The *original entry* is located in /home/lddoc/source/LPC/lpc.rst, line 
   8.)

   Todo: when we use the TOC method of generating links instead of the 
   explicit one, we don't get the benefit of the ref-specific styling. For 
   most of these docs this is irrelephant, but at least of this writing the 
   plaintext copy for the mapping guide gives us no clue as to what file it's 
   in. This may just be an artifact of the present decision to define both the
   mapping type AND include the mapping guide in mappings.rst as top-level 
   directives, (problem may self-resolve when I address that...)

   (The *original entry* is located in /home/lddoc/source/LPC/lpc.rst, line 
   17.)

   Todo: This defines some of these modifiers twice (once for functions, once 
   for vars) which means they show up twice in the index and so on. But 
   because the definitions are on the same page, the html #link just takes us 
   to the first (function) definition. We could in theory append a number to 
   differentiate these which would work fine for the index, but manual 
   references (i.e., `:modifier:'public'`) would still be ambiguous and would 
   just resolve to the first one. Not sure what the best way to handle this 
   is. Perhaps a single authoritative modifier list describing them 
   conceptually with later enumerations that include/describe how the types 
   apply in a given context.

   (The *original entry* is located in /home/lddoc/source/LPC/modifiers.rst, 
   line 8.)

   Todo: probably want to document all of these with 
   a `..Â operator::` directive

   (The *original entry* is located in /home/lddoc/source/LPC/operators.rst, 
   line 5.)

   Todo: see above

   (The *original entry* is located in /home/lddoc/source/LPC/string.rst, line
   9.)

   Todo: syntax section

   (The *original entry* is located in /home/lddoc/source/LPC/string.rst, line
   15.)

   Todo: fill this out

   (The *original entry* is located in /home/lddoc/source/LPC/symbol.rst, line
   5.)

   Todo: I think the above needs to shift in 3.5

   (The *original entry* is located in /home/lddoc/source/LPC/types.rst, line 
   45.)

   Todo: if there were a pragma directive subclassing macro, we could link to 
   the pragma def anytime one appears in text...

   (The *original entry* is located in /home/lddoc/source/LPC/unions.rst, line
   9.)

   Todo: this may need to have the closure form above rmed (some others in 
   directory have a similar issue); the problem is on the one hand that the 
   applied directory isn't equipped to handle them well, and on the other they
   are technically documenting the hook/closure forms and not strictly the 
   apply, making everything really murky. Perhaps this is a structural problem
   because the applied concept is a relic, but the documentation attempts to 
   bridge between the old/obsolete concept and the new versions of the same in
   hook. In this case, the "answer" might just be that applied needs to be 
   removed, moved to obsolete, trimmed down to a single readme pointing to 
   hooks, or trimmed down to a bunch of stubs pointing to the proper hook for 
   handling the same behavior.

   (The *original entry* is located in 
   /home/lddoc/source/applied/clean_up.rst, line 4.)

   Todo: below probably needs actual code, if the document stays and the hook 
   isn't already well-documented.

   (The *original entry* is located in 
   /home/lddoc/source/applied/clean_up.rst, line 20.)

   Todo: ref/link the hooks below.

   (The *original entry* is located in /home/lddoc/source/applied/create.rst, 
   line 3.)

   Todo: the following should probably be explained better than it is

   (The *original entry* is located in /home/lddoc/source/applied/exit.rst, 
   line 7.)

   Todo: this is now a false document, right?

   (The *original entry* is located in /home/lddoc/source/applied/id.rst, line
   7.)

   Todo: need a good way to document these ERQ options. Whatever I ultimately 
   name our 'glossary' directive might be useful... return to this later.

   (The *original entry* is located in /home/lddoc/source/concepts/erq.rst, 
   line 74.)

   Todo: refine how this doc uses example/usage/advanced* to fall into line 
   with what we want the conventions to be across all docs...

   (The *original entry* is located in 
   /home/lddoc/source/concepts/inheritance.rst, line 34.)

   Todo: another big option section that suggests existing semantic markup may
   be insufficient.

   (The *original entry* is located in 
   /home/lddoc/source/concepts/intermud.rst, line 18.)

   Todo: another semantically problematic section (though this one's current 
   markup lends itself quite well to being turned into one or more glossaries)

   (The *original entry* is located in 
   /home/lddoc/source/concepts/intermud.basic.rst, line 33.)

   Todo: something more semantic or at least w/ better presentation than a 
   literal here?

   (The *original entry* is located in /home/lddoc/source/concepts/mccp.rst, 
   line 34.)

   Todo: This is out of date. Also document the relation with reset

   (The *original entry* is located in /home/lddoc/source/concepts/memory.rst,
   line 4.)

   Todo: reconcile how this doc uses usage/example sections

   (The *original entry* is located in /home/lddoc/source/concepts/mysql.rst, 
   line 11.)

   Todo: partial rewrite using a few semantic structures

   (The *original entry* is located in /home/lddoc/source/concepts/native.rst,
   line 5.)

   Todo: needs rewrite with multiple semantic structures to replace tables and
   such.

   (The *original entry* is located in 
   /home/lddoc/source/concepts/negotiation.rst, line 4.)

   Todo: replace above table with something semanticish

   (The *original entry* is located in /home/lddoc/source/concepts/pcre.rst, 
   line 700.)

   Todo: the above section should probably use more semantic markup instead of
   just being a big literal block

   (The *original entry* is located in /home/lddoc/source/concepts/pgsql.rst, 
   line 58.)

   Todo: the docs for both no_echo and telnet_neg have a see-also crossref for
   telnet(C) which doesn't exist (and never has, as far as I can 
   tell.)Explanations probably include: - the reference was to the wrong 
   location, and it's really supposed to be to an RFC or manpage or something 
   - the doc existed but was accidentally nuked before existing version 
   history - the doc was supposed to be made and never was

   (The *original entry* is located in /home/lddoc/source/concepts/telnet.rst,
   line 3.)

   Todo: evaluate whether we can/if it's worth rendering references to a 
   master func as `master->function()`

   (The *original entry* is located in /home/lddoc/source/concepts/tls.rst, 
   line 26.)

   Todo: evaluate whether there's a smart way to reference all of the tls 
   efuns without manually listing each one separately. If I made some sort of 
   tag/topic system I could certainly target that, but not immediately obvious
   how useful that could be for plaintext

   (The *original entry* is located in /home/lddoc/source/concepts/tls.rst, 
   line 45.)

   Todo: in this document, any references to compile options need to be 
   properly linked/refd

   (The *original entry* is located in 
   /home/lddoc/source/driver/invocation.rst, line 4.)

   Todo: non-zero chance that the use of std domain features like 
   program/option will create subtle issues later when attempting to xref 
   these

   (The *original entry* is located in 
   /home/lddoc/source/driver/invocation.rst, line 6.)

   Todo: search for a few keywords like compile to hunt down documentation 
   that refers to configure/build/compile-time options for the driver

   (The *original entry* is located in 
   /home/lddoc/source/driver/invocation.rst, line 8.)

   Todo: sphinx doesn't like the way we document these -s flags below. It 
   wants to add index/ref targets for the flag, so it throws 3 warnings for 
   duplicate -s options here. It supports combining more than one syntax in a 
   def with commas as we do, but that leaves no good way for providing 
   separate descriptions. My only idea atm is to only pass the long form in to
   the flag, and then note the short form in the body; (i.e., only solution 
   is to cheat)

   (The *original entry* is located in 
   /home/lddoc/source/driver/invocation.rst, line 159.)

   Todo: the option `--randominit` mentioned above, and in the last item of 
   the history section, doesn't exist nor can I readily find a time when it 
   has. My best guess is that at one time during development of the feature 
   but perhaps outside of present code history `--randomdevice` was 
   *called* `--randominit` and based on this assumption I have changed it. I 
   may, however, be wrong.

   (The *original entry* is located in 
   /home/lddoc/source/driver/invocation.rst, line 262.)

   Todo: above could be an 'example' directive

   (The *original entry* is located in 
   /home/lddoc/source/efun/all_environment.rst, line 12.)

   Todo: should this just link to the other list where these are more 
   thoroughly defined? Does this list have any information the others don't?

   (The *original entry* is located in 
   /home/lddoc/source/efun/set_driver_hook.rst, line 13.)

   Todo: the below section probably needs to be recast. It's trying to use the
   defines in xml.h to tell us that array index 0 will be a string containing
   the tagname, index 1 will be a mapping with its attributes, and 2 will be 
   a nested mixed * array of parsed subtags.
   string XML_TAG_NAME
      The name of the XML tag.

   mapping XML_TAG_ATTRIBUTES
      All attributes given to the XML tag as a mapping where the key is the 
      attribute name and the value is its string value.

      If the xml tag does not contain any attributes, this element is set 0.

   mixed * XML_TAG_CONTENTS
      The contents of this xml tag as an array. This array may contain either 
      strings, or arrays of sub-tags again with three elements. (see example)

      If the xml tag does not contain anything, the element is set to 0.

   (The *original entry* is located in /home/lddoc/source/efun/xml_parse.rst, 
   line 12.)

   Todo: better markup for the below literal block?

   (The *original entry* is located in /home/lddoc/source/hook/clean_up.rst, 
   line 14.)

   Todo: better markup for the literal blocks in this section

   (The *original entry* is located in /home/lddoc/source/hook/clone_uids.rst,
   line 9.)

   Todo: better markup structures to replace the literal blocks in this 
   document

   (The *original entry* is located in /home/lddoc/source/hook/load_uids.rst, 
   line 9.)

   Todo: this was formerly documenting H_TELNET_NEG, which I think was 
   probably a mistake, though I'm not 100% sure; needs to be clarified.

   (The *original entry* is located in /home/lddoc/source/hook/no_echo.rst, 
   line 3.)

   Todo: not clear what <local> in the next paragraph refers to

   (The *original entry* is located in /home/lddoc/source/hook/no_echo.rst, 
   line 14.)

   Todo: there isn't actually an other/other.rst file

   (The *original entry* is located in /home/lddoc/source/index.rst, line 26.)

   Todo: above lists don't include the new "internals" directory, yet.

   (The *original entry* is located in /home/lddoc/source/index.rst, line 54.)

   Todo: need to figure out how to integrate the efun.de copy (which I also 
   have yet to 
   convert) `efun.de/Â Â Â Â germanÂ translationsÂ ofÂ theÂ efun/Â manpages.`

   (The *original entry* is located in /home/lddoc/source/index.rst, line 56.)

   Todo: I for internal? SE for simul_efun; I had a note for S as well--
   perhaps that's SYS? dunno.

   (The *original entry* is located in /home/lddoc/source/index.rst, line 70.)

   Todo: add history, info on doc format?

   (The *original entry* is located in /home/lddoc/source/index.rst, line 72.)

   Todo: the paragraphs in this subtopic read like bullet points and should 
   probably be converted.

   (The *original entry* is located in 
   /home/lddoc/source/internals/codestyle.rst, line 34.)

   Todo: is the above a comment a meta comment on the entire section, or a 
   comment on starting lines with a syntactical marker? What's an appropriate 
   translation of the brackets it uses

   (The *original entry* is located in 
   /home/lddoc/source/internals/codestyle.rst, line 113.)

   Todo: I just made this description up, if someone wants to change it. :)

   (The *original entry* is located in 
   /home/lddoc/source/internals/internals.rst, line 5.)

   Todo: initially fairly conservative with what I've converted to an inline 
   literal in case some of these should end up being xrefs of some sort; in 
   any case, much more inline markup could be used here.

   (The *original entry* is located in /home/lddoc/source/internals/parsing-
   inline-closures.rst, line 3.)

   Todo: presentation of above works but isn't terribly faithful to what 
   original doc intends I don't think

   (The *original entry* is located in /home/lddoc/source/internals/parsing-
   inline-closures.rst, line 32.)

   Todo: this doc is referenced from 4 docs in this folder (epilog, flag, 
   preload, reactivate_destructed_master), which makes me wonder if they _all_
   should, if we should have an automagic backref of some sort, if none 
   should, etc.

   (The *original entry* is located in /home/lddoc/source/master/master.rst, 
   line 3.)

   Todo: the below was tagged "Security hint" in our docs; it might be nice to
   either have a separate directive for security issues, or be able to supply
   a type/category option to the other admonitions (i.e., use directives like
   note, warning, hint, tip, but be able to supply a :category: security, 
   etc.)

   (The *original entry* is located in /home/lddoc/source/master/master.rst, 
   line 72.)

   Todo: this is another case where being able to pull part of this from the 
   target would be nice; I wonder if a `:role:`ref`` can be magicked into an 
   expansion based on the synopses declared in the target? If nothing else, 
   can use the link feature 
   (`:master:`voidÂ inaugurateÂ master()Â <inaugurate_master>`` or whatnot.)

   (The *original entry* is located in /home/lddoc/source/master/master.rst, 
   line 82.)

   Todo: not clear what status should be indicated here; deprecated? removed? 
   just optional? obsolete?

   (The *original entry* is located in 
   /home/lddoc/source/obsolete/set_light.rst, line 4.)

   Todo: in theory this information could probably be massaged for doxygen 
   such that it documents the "efun" class

   (The *original entry* is located in /home/lddoc/source/efun/efun.rst, line 
   9.)

   Todo: below language calls these 'kinds' but they're really 'statuses', and
   there might be a smart way to link these (at least in the HTML docs) with 
   the actual status on individual docs. IIRC we use these for more than just 
   efuns, so it might be best to have a meta page with a list of document 
   statuses/explanations, link all of the actual statuses there, and then link
   these items to those members.

   (The *original entry* is located in /home/lddoc/source/efun/efun.rst, line 
   11.)

   Todo: failed refs for assoc, insert_alist and intersect_alist above

   (The *original entry* is located in /home/lddoc/source/efun/efun.rst, line 
   50.)

   Todo: decide between the brief/less-explicit alt-approach, and the explicit
   approaches above... One advantage of the explicit approach is that 
   breakages in it reveal when documents have moved or gone away and haven't 
   been properly rooted out. That said, it can still easily miss new documents
   (i.e., we add some TLS efun).

   (The *original entry* is located in /home/lddoc/source/efun/efun.rst, line 
   71.)

   Todo: should JSON funcs be here?

   (The *original entry* is located in /home/lddoc/source/efun/efun.rst, line 
   73.)
