SYNOPSIS
========
   int call_resolved(mixed result, object ob, string func, ...)

DESCRIPTION
===========
   Similar to call_other(E). If `ob->func()` is defined and publicly 
   accessible, any of the optional extra arguments are passed 
   to `ob->func(...)`. The result of that function call is stored in result, 
   which must be passed by reference.

   The efun returns 1 if the function could be called. If ob::fun does not 
   define a publicly accessible function, the efun will call the 
   H_DEFAULT_METHOD(H) hook if set. If the hook is not set or can't resolve 
   the call either, the efun will return 0. If the hook is set and can resolve
   the call, the efun will return -1.

   Calls to the master object never use the H_DEFAULT_METHOD(H) hook. To force
   non-default calls, call_direct_resolved(E) can be used.

   ob can also be an object_name. If a string is passed for ob and an object 
   with that name can't be found or loaded, an error occurs.

HISTORY
=======
   - changed (3.3.113) -- added the H_DEFAULT_METHOD(H) hook.

SEE ALSO
========
   call_other(E), call_direct(E), call_direct_resolved(E), create(A), pragma, 
   extern_call(E), function_exists(E), functions, map_objects(E)
