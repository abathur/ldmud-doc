.. efun:: void set_driver_hook(int what, closure arg)
  void set_driver_hook(int what, string arg)
  void set_driver_hook(int what, string *arg)
  :include: <driver_hook.h>

  This privileged efun sets the driver hook 'what' (values are defined in <driver_hook.h>) to 'arg'. The exact meanings and types of 'arg' depend of the hook set. To remove a hook, set 'arg' to 0.

  These hooks exist:

  .. todo:: should this just link to the other list where these are more thoroughly defined? Does this list have any information the others don't?

  :macro:`H_MOVE_OBJECT0`
  :macro:`H_MOVE_OBJECT1`
    arg: unbound lambda
    Mandatory hooks implementing the :efun:`move_object`.

  :macro:`H_LOAD_UIDS`
  :macro:`H_CLONE_UIDS`
    arg: unbound lambda or lfun closure
    Mandatory hooks to determine the (e)uid of new objects.

  :macro:`H_CREATE_SUPER`
  :macro:`H_CREATE_OB`
  :macro:`H_CREATE_CLONE`
  :macro:`H_RESET`
  :macro:`H_CLEAN_UP`
    arg: lambda closure (:macro:`H_CLEAN_UP` also accepts a lfun
      closure), function name.
    Optional hooks for creation/reset/clean up-actions.

  :macro:`H_DEFAULT_METHOD`
    arg: lambda closure, lfun closure, function name.
    Optional hook for default method implementation.

  :macro:`H_DEFAULT_PROMPT`
    arg: lambda closure, lfun closure, prompt string.
    Optional hook for the default command prompt.

  :macro:`H_PRINT_PROMPT`
    arg: lambda closure, lfun closure, function name.
    Optional hook to print the command prompt.

  :macro:`H_MODIFY_COMMAND`
    arg: lambda closure, lfun closure, function name, mapping
    Optional hook for modifying player commands before the
    parser sees them.

  :macro:`H_NOTIFY_FAIL`
    arg: lambda closure, lfun closure, string.
    Mandatory hook to generate the default message if an entered
    command couldn't be parsed and no :efun:`notify_fail` command is
    in effect.

  :macro:`H_SEND_NOTIFY_FAIL`
    arg: lambda closure, lfun closure, string.
    Optional hook to deliver the notify fail message from a failed
    command.

  :macro:`H_NO_IPC_SLOT`
    arg: string.
    Optional hook specifying the 'sorry' messages if logins are
    rejected due to fullness of the mud.

  :macro:`H_INCLUDE_DIRS`
    arg: lambda closure, lfun closure, string array.
    Semi-mandatory hook specifying the directories where <>-type
    include files are searched.

  :macro:`H_AUTO_INCLUDE`
    arg: lambda closure, lfun closure, string
    Optional hook to specify a string to be included before the
    source of every compiled LPC object.

  :macro:`H_TELNET_NEG`
    arg: lambda closure, lfun closure, string.
    Optional hook to specifiy how to perform a single telnet
    negotiation.

  :macro:`H_NOECHO`
    arg: lambda closure, lfun closure, string.
    Optional hook to specifiy how to perform the telnet actions
    to switch the echo mode (used for e.g. passwords in :efun:`input_to`).

  :macro:`H_ERQ_STOP`
    arg: lambda closure, lfun closure.
    Optional hook to notify the mudlib about the termination of
    the erq demon.

  :macro:`H_MSG_DISCARDED`
    arg: lambda closure, lfun closure, string
    Optional hook to specify a message or take other measures
    when a message had to be discarded.

  See :overview:`hook` for a detailed discussion.

  :history 3.2.1@1 introduced: as ``efun309()``,
  :history 3.2.1@13 changed: renamed to :efun:`set_driver_hook`.

  .. seealso:: :overview:`hook`
