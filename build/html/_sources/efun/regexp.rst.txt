.. efun:: string * regexp(string *list, string pattern)
  string * regexp(string *list, string pattern, int opt)
  :include: <regexp.h>

  Match the pattern :arg:`pattern` (interpreted according to :arg:`opt` if given) against all strings in list, and return a new array with all strings that matched.

  If there is an error in the regular expression, a runtime error will be raised.

  .. usage::

    This example uses a regular expression to test the given string (which is packed into an array) if there is something like "help ... me" inside of it::

      string strs;
      string pattern;

      if (regexp_package() == RE_PCRE)
          pattern = "\\<help\\>.*\\<me\\>";
      else
          pattern = "\\bhelp\\b.*\\bme\\b";

      if (strs = regexp(({"please, help me Sir John."}), pattern)) {
          if (sizeof(strs)
              write("It matches.\n");
      }

  :history 3.3 changed: added the optional :arg:`opt` argument.
  :history 3.5.0 changed: an error is raised if :macro:`RE_PCRE` is specified in :arg:`opt`, but the driver lacks PCRE support.

  .. seealso:: :efun:`regexplode`, :efun:`regmatch`, :efun:`regreplace`, :efun:`regexp_package`, :efun:`sscanf`, :concept:`regexp`
