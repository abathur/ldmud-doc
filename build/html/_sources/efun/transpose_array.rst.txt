.. efun:: mixed * transpose_array(mixed *arr)

  Applied to an alist, results in an array of ``({ key, data })`` pairs, useful if you want to use :efun:`sort_array` or :efun:`filter` on the alist.

  .. todo:: probably shouldn't be phrased in terms of alists anymore; it seems like we've seen fit to retain it despite their deprecation, so we need to make a case for how you might actually want to use it...

  .. usage::

    ::

      transpose_array(({ ({1,2,3}), ({a,b,c}) }))
      // returns ({ ({1,a}), ({2,b}), ({3,c}) })

    The mapping 'map' in the example below is returned as an array of ``({ key, data })`` pairs, sorted by the keys.::

      sort_array(transpose_array(({ m_indices(map), m_values(map) })),
             lambda(({ 'a, 'b }),
                    ({ #'<, ({ #'[, 'a, 0 }),
                            ({ #'[, 'b, 0}) }) )

  .. seealso:: :lang:`alists`, :efun:`sort_array`
