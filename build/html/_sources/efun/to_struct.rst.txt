.. efun:: mixed to_struct(mixed *|mapping data)
  mixed to_struct(mixed *|mapping data, struct template)
  mixed to_struct(struct data)
  mixed to_struct(struct data, struct template)

  The given array, mapping or struct :arg:`data` is returned as a struct. If a :arg:`template` struct is given, the returned struct is of the same type. Without a template, an anonymous struct is returned in case of arrays and mappings and in case of structs :arg:`data` is returned unchanged.

  If :arg:`data` is an array, its elements are assigned in order to the resulting struct. For an anonymous struct, all elements of :arg:`data` are assigned, for a templated struct only as many as fit into the struct.

  If :arg:`data` is a mapping and no template is given, the resulting anonymous struct contains all elements from :arg:`data` with a string key; the key name is used as struct member name.

  If :arg:`data` is a mapping and a template is given, the struct member names are used as keys for lookups in :arg:`data`; the found data is assigned to the struct members.

  If :arg:`data` is a struct and a template is given, a struct of the type of template is created and all members from :arg:`data` are copied to the new struct, which exist in both structs. This conversion is only allowed between a struct and one of its base structs or a base struct and one of its children. Otherwise an error is raised.

  Neither :arg:`data` nor :arg:`template` will be changed in this process - the result is a new struct value. The actual value of :arg:`template` does not matter, only its type.

  Since the returned struct can't be known at compile time, the efun is declared to return 'mixed'.

  :history 3.3.250 introduced:
  :history 3.3.344 changed: added the template argument.
  :history 3.3.433 changed: added the conversion from mappings.
  :history 3.3.720 changed: added the conversion of structs into another struct.

  .. seealso:: :efun:`to_array`, :efun:`to_string`, :efun:`mkmapping`, :type:`struct`
