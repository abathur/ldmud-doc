.. master:: void inaugurate_master(int arg)

  This function is called in the master object after it has been created and is fully functional.

  .. note:: The :applied:`create` function is of little use in constructing the master object because there is no simul_efun object yet and the interpreter does not know anything about the user-ids and access permissions.

  .. todo:: note above; should create reference the hook, the apply? I rephrased lightly but I doubt a naive user knows _why_ these are problems.

  The argument :arg:`arg` denotes why this function is called:

  .. todo:: should these be flags?

  arg = 0
    the mud just started, this is the first master of all.

  arg = 1
    the master was destructed and then reactivated (because a new one couldn't be loaded).

  arg = 2
    the master was destructed and then reactivated, but additionally lost all variable contents.

  arg = 3
    this is a reloaded master.

  This function has to at least set up the driverhooks to use (in 3.2.1). Also, any mudwho or wizlist handling has to be initialized here.

  .. todo:: should above be a history note? which driverhooks? If there are any minimum absolutes, this doc should probably either have a usage section or point to an external file?

  Besides that, do whatever you feel you need to do, e.g. ``set_auto_include_string()``, or give the master a decent euid.

  .. todo:: set_auto_include_string is obsolete, revise

  .. seealso:: :master:`initialisation`, :applied:`create`, :concept:`simul_efun`, :master:`get_master_uid`, :master:`flag`, :master:`reactivate_destructed_master`
